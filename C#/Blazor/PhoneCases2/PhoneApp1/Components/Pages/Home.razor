@page "/"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations;
@using PhoneApp2.Data;
@using PhoneApp2.Models;
@inject PhoneDBContext DbContext;

<PageTitle>Phone Case</PageTitle>

<EditForm Model="newPhone" OnValidSubmit="AddPhone" FormName="1">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <ul>
            <li>Apple</li>
            <li>Samsung</li>
            <li>Razer</li>
            <li>TheAlmightyMotorola</li>
        </ul>
        <label for="brand" class="form-label">Brand</label> 
        <InputText id="brand" class="form-control" @bind-Value="newPhone.Brand" />
        <ValidationMessage For="@(() => newPhone.Brand)" />
    </div>
    <div>
        <label for="model" class="form-label">Model</label>
        <InputText id="model" class="form-control" @bind-Value="newPhone.Model" />
        <ValidationMessage For="@(() => newPhone.Model)" />
    </div>
    <div>
        
        <label for="material" class="form-label">Material</label>
        <InputText id="material" @bind-Value="newPhone.Material" />
        <ValidationMessage For="@(() => newPhone.Material)" />
        <ul style="max-height: 30px; overflow:hidden; overflow-y:scroll;">
            <li>Carbon Fiber</li>
            <li>Metal</li>
            <li>Titanium</li>
            <li>Plastic</li>
            <li>Sheet Metal</li>
            <li>Clam Shell</li>
            <li>Faux Animal Fur</li>
            <li>Apples</li>
        </ul>
    </div>
    <div>
        <label for="maxCostAmount" class="form-label">Max Cost Amount</label> 
        <InputNumber id="maxCostAmount" class="form-control" @bind-Value="newPhone.MaxCostAmount" />
        <ValidationMessage For="@(() => newPhone.MaxCostAmount)" />
    </div>
    <div>
        <label for="trimColor" class="form-label">Trim Color</label>
        <InputText id="trimColor" class="form-control" @bind-Value="newPhone.TrimColor" />
        <ValidationMessage For="@(() => newPhone.TrimColor)" />
    </div>
    <div>
        
        <label for="accentColor" class="form-label">Accent Color</label>
        <InputText id="accentColor" @bind-Value="newPhone.AccentColor" />
        <ValidationMessage For="@(() => newPhone.AccentColor)" />
        <ul style="max-height: 30px; overflow:hidden; overflow-y:scroll;">
            <li>Blue</li>
            <li>Pink</li>
            <li>Yellow</li>
            <li>Green</li>
            <li>Greener</li>
            <li>Yellowish</li>
            <li>Blueberry</li>
        </ul>
    </div>

    using PhoneApp2.Data;

    <button type="submit" >Buy</button>
</EditForm>
<EditForm Model="newPhone" OnValidSubmit="CalCost" FormName="2">
    <button type="submit">Check Cost</button>
    <p>Before tax: @newPhone.totalBeforeTax</p>
    <p>Tax: @newPhone.totalTax</p>
    <p>Total: @newPhone.grandTotal</p>
</EditForm>

<h1>@notif</h1>

<ul>
    @foreach (var phone in phones)
    {
        <li>Brand: @phone.Brand</li>
        <li>Model: @phone.Model</li>
        <li>Material: @phone.Material</li>
        <li>MaxCostAmount: @phone.MaxCostAmount</li>
        <li>TrimColor: @phone.TrimColor</li>
        <li>AccentColor: @phone.AccentColor</li>
    }
</ul>



@code{

    
    @* public class Phone{
        public const int totalPhoneCost = 850;
        public string totalCostErrorString = $"Cost must be atleast 1$ and no greater {totalPhoneCost} than 500$!";
        public float totalBeforeTax = 0;
        public float totalTax = 0;
        public float grandTotal = 0;

        [Required(ErrorMessage="Brand required!")]
        [StringLength(25, ErrorMessage="Brand length too long!")]
        [RegularExpression(@"^[a-zA-Z]+$", ErrorMessage = "Brand must contain only alphabets")]
        [BrandsAllowed(new string[] {"Apple", "Samsung", "Razer", "TheAlmightyMotorola"})]
        public string Brand {get;set;}

        [Required(ErrorMessage ="Model required!")]
        [StringLength(25, ErrorMessage="Model length too long!")]
        [RegularExpression(@"^[a-zA-Z]+$", ErrorMessage = "Model must contain only alphabets")]
        public string Model {get;set;}

        [Required(ErrorMessage="Material required!")]
        [StringLength(30, ErrorMessage="Material length too long!")]
        [RegularExpression(@"^[a-zA-Z { }]+$", ErrorMessage = "Material must contain only alphabets")]
        [MaterialsAllowed(new string[] {"Carbon Fiber", "Metal", "Titanium", "Plastic", "Sheet Metal", "Clam Shell", "Faux Animal Fur", "Apples"})]
        public string Material {get;set;}

        [Required(ErrorMessage="Max cost required!")]
        [Range(1,totalPhoneCost, ErrorMessage = "Cost must be atleast 1$ and no greater than 850$!")]
        public float MaxCostAmount {get;set;}

        [Required(ErrorMessage="Trim color required!")]
        [StringLength(30, ErrorMessage="Trim Color length too long!")]
        [RegularExpression(@"^[a-zA-Z]+$", ErrorMessage = "Trim color must contain only alphabets")]
        public string TrimColor {get;set;}

        [Required(ErrorMessage="Accent color required!")]
        [StringLength(30, ErrorMessage="Accent color length too long!")]
        [RegularExpression(@"^[a-zA-Z]+$", ErrorMessage = "Accent color must contain only alphabets")]
        [AccentColorsAllowed(new string[] {"Blue", "Pink", "Yellow", "Green", "Greener", "Yellowish", "Blueberry"} )]
        public string AccentColor {get;set;}
    } *@

    public string notif = "";
    public Phone newPhone = new Phone();
    public List<Phone> phones = new List<Phone>();

    public async Task AddPhone()
    {
        CalCost();
        if(newPhone.grandTotal <= Phone.totalPhoneCost)
        {
            phones.Add(newPhone);
            DbContext.Phones.Add(newPhone);
            await DbContext.SaveChangesAsync();

            newPhone = new Phone();
            notif = "Phone Added";
        }else{
            notif = "Phone Not Added";
        }


        
    }

    public void CalCost()
    {
        newPhone.totalBeforeTax = 0;
        string[,] brandCost =  {{"Apple", "200"}, {"Samsung", "100"}, {"Razer", "300"}, {"TheAlmightyMotorola", "400"}};
        string[,] matCost = {{"Carbon Fiber", "100"}, {"Metal", "50"}, {"Titanium", "200"}, {"Plastic", "10"}, {"Sheet Metal", "60"}, {"Clam Shell", "300"}, {"Faux Animal Fur", "400"}, {"Apples", "5"}};
        string[,] accentCost = {{"Blue", "100"}, {"Pink", "10"}, {"Yellow", "100"}, {"Green", "50"}, {"Greener", "51"}, {"Yellowish", "99"}, {"Blueberry", "300"}};

        for(int i = 0; i < brandCost.GetLength(0); i++){
            if(brandCost[i,0] == newPhone.Brand){
                newPhone.totalBeforeTax += float.Parse(brandCost[i,1]);
            }
        }
        for(int i = 0; i < matCost.GetLength(0); i++){
            if(matCost[i,0] == newPhone.Material){
                newPhone.totalBeforeTax += float.Parse(matCost[i,1]);
            }
        }
        for(int i = 0; i < accentCost.GetLength(0); i++){
            if(accentCost[i,0] == newPhone.AccentColor){
                newPhone.totalBeforeTax += float.Parse(accentCost[i,1]);
            }
        }

        newPhone.totalTax = newPhone.totalBeforeTax * 0.7f;
        newPhone.grandTotal = newPhone.totalBeforeTax + newPhone.totalTax;
    }
}